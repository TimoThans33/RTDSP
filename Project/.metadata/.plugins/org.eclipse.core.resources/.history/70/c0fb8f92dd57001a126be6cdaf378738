/*************************************************************************************
			       DEPARTMENT OF ELECTRICAL AND ELECTRONIC ENGINEERING
					   		     IMPERIAL COLLEGE LONDON 

 				      EE 3.19: Real Time Digital Signal Processing
					       Dr Paul Mitcheson and Daniel Harvey

				        		  LAB 3: Interrupt I/O

 				            ********* I N T I O. C **********

  Demonstrates inputing and outputing data from the DSK's audio port using interrupts. 

 *************************************************************************************
 				Updated for use on 6713 DSK by Danny Harvey: May-Aug 2006
				Updated for CCS V4 Sept 10
 ************************************************************************************/
/*
 *	You should modify the code so that interrupts are used to service the 
 *  audio port.
 */
/**************************** Pre-processor statements ******************************/

#include <stdlib.h>
//  Included so program can make use of DSP/BIOS configuration tool.  
#include "dsp_bios_cfg.h"

/* The file dsk6713.h must be included in every program that uses the BSL.  This 
   example also includes dsk6713_aic23.h because it uses the 
   AIC23 codec module (audio interface). */
#include "dsk6713.h"
#include "dsk6713_aic23.h"
//#include "coef.txt"
// math library (trig functions)
#include <math.h>

// Some functions to help with writing/reading the audio ports when using interrupts.
#include <helper_functions_ISR.h>

// PI defined here for use in your code
#define PI 3.141592653589793

// Define how many values are in the lookup table
#define SINE_TABLE_SIZE 256

// define a 12 element delay buffer
#define N 2
#define order 4
int N2 = 2*order + 1;
double b[] = {0.05882352941, 0.05882352941};
double a[] = {1, -0.88235294117};

double a1[] = {1 ,-7.80973974e+00 ,2.68412482e+01 ,-5.30198282e+01 ,6.58319005e+01 ,-5.26124756e+01 ,2.64303907e+01 ,-7.63111434e+00 ,9.69621051e-01};
double b1[] = {9.85496564e-02 ,-7.72311598e-01 ,2.66384542e+00 ,-5.28134630e+00 ,6.58252588e+00 ,-5.28134630e+00 ,2.66384542e+00 ,-7.72311598e-01 ,9.85496564e-02};

double v[N];
double w[N+1];
double x[9];
int buffer[N];
int large_buffer[2*N];
double y[9];
double out;
double output;
int k = N-1;
int i;
int j = 8;
int ptr = N-1;
int ptr2 = 2*N-1;
double yout;
double yout2;
/******************************* Global declarations ********************************/

/* Audio port configuration settings: these values set registers in the AIC23 audio 
   interface to configure it. See TI doc SLWS106D 3-3 to 3-10 for more info. */
DSK6713_AIC23_Config Config = { \
			 /**********************************************************************/
			 /*   REGISTER	            FUNCTION			      SETTINGS         */ 
			 /**********************************************************************/\
    0x0017,  /* 0 LEFTINVOL  Left line input channel volume  0dB                   */\
    0x0017,  /* 1 RIGHTINVOL Right line input channel volume 0dB                   */\
    0x01f9,  /* 2 LEFTHPVOL  Left channel headphone volume   0dB                   */\
    0x01f9,  /* 3 RIGHTHPVOL Right channel headphone volume  0dB                   */\
    0x0011,  /* 4 ANAPATH    Analog audio path control       DAC on, Mic boost 20dB*/\
    0x0000,  /* 5 DIGPATH    Digital audio path control      All Filters off       */\
    0x0000,  /* 6 DPOWERDOWN Power down control              All Hardware on       */\
    0x0043,  /* 7 DIGIF      Digital audio interface format  16 bit                */\
    0x008d,  /* 8 SAMPLERATE Sample rate control             8 KHZ                 */\
    0x0001   /* 9 DIGACT     Digital interface activation    On                    */\
			 /**********************************************************************/
};


// Codec handle:- a variable used to identify audio interface  
DSK6713_AIC23_CodecHandle H_Codec;

 /******************************* Function prototypes ********************************/
void init_hardware(void);     
void init_HWI(void);
void InteruptFunc(void);
void sine_init(void);
void bandpass();
void non_circ_FIR();
void circ_FIR();
void double_circ_FIR();
/********************************** Main routine ************************************/
 void main(){
    // initialize board and the audio port
    init_hardware();
    /* initialize hardware interrupts */
    init_HWI();
    /* loop indefinitely, waiting for interrupts */
    for (i=0; i <9; i++){
        x[i] = 0;
        y[i] = 0;
    }
    while(1)
    {};
}
/********************************** init_hardware() **********************************/  
void init_hardware()
{
    // Initialize the board support library, must be called first 
    DSK6713_init();
    
    // Start the AIC23 codec using the settings defined above in config 
    H_Codec = DSK6713_AIC23_openCodec(0, &Config);

	/* Function below sets the number of bits in word used by MSBSP (serial port) for 
	receives from AIC23 (audio port). We are using a 32 bit packet containing two 
	16 bit numbers hence 32BIT is set for  receive */
	MCBSP_FSETS(RCR1, RWDLEN1, 32BIT);	

	/* Configures interrupt to activate on each consecutive available 32 bits 
	from Audio port hence an interrupt is generated for each L & R sample pair */	
	MCBSP_FSETS(SPCR1, RINTM, FRM);

	/* These commands do the same thing as above but applied to data transfers to  
	the audio port */
	MCBSP_FSETS(XCR1, XWDLEN1, 32BIT);	
	MCBSP_FSETS(SPCR1, XINTM, FRM);	
	

}

/********************************** init_HWI() **************************************/  
void init_HWI(void)
{
	IRQ_globalDisable();			// Globally disables interrupts
	IRQ_nmiEnable();				// Enables the NMI interrupt (used by the debugger)
	IRQ_map(IRQ_EVT_RINT1,4);		// Maps an event to a physical interrupt
	IRQ_enable(IRQ_EVT_RINT1);		// Enables the event
	//IRQ_enable(IRQ_EVT_XINT1);
	IRQ_globalEnable();				// Globally enables interrupts

} 

/******************** WRITE YOUR INTERRUPT SERVICE ROUTINE HERE***********************/  
void InteruptFunc(void)
{
    bandpass();
    mono_write_16Bit((Int16) y[0]);   //Write output to codec
}

void bandpass(void)
{
    yout = 0;
    yout2 = 0;
    i=0;
    j=8;
    x[0] = mono_read_16Bit();
    yout = b1[0]*x[0];
    //x[0] = mono_read_16Bit();
    for (i=1; i<N2; i++){
        yout += b1[i]*x[i];
        yout2 += a1[i]*y[i];
    }
    y[0] = yout-yout2;
    for (j=N2-1; j>0; j--){
        y[j] = y[j-1];
        x[j] = x[j-1];
    }
}
void non_circ_FIR()
{
    /*x[0] = mono_read_16Bit();
    y[0] = b[0] * x[0];
    for (i = N; i >0; i--){  //Perform the convolution
        y[0] += (b[i]*x[i]-a[i]*y[i]);
        x[i]=x[i-1];
        y[i] = y[i-1];
    }*/
   // y[0] = out;
    /*for (j = N-1; j>0; j--){
        x[j]=x[j-1];
        y[j] = y[j-1];
    }*/

    v[0] = mono_read_16Bit();
    w[0] = b[0] * v[0];
    w[1] = w[0] + v[1]*b[1]-w[2]*a[1];
    w[2] = w[0] + v[1]*b[1]-w[2]*a[1];
    v[1] = v[0];
    //w[2] = b[0]*v[0] + v[1]*b[1]-w[1]*a[1];
    //w[1]= w[1]+w[0];
}

void circ_FIR()
{
    out = 0;
    buffer[ptr] = mono_read_16Bit();
    for (i = 0; i<N-ptr; i++){
        out += buffer[ptr+i]*b[i];
    }
    for (i=N-ptr; i<N; i++){
        out += b[i]*buffer[ptr+i-N];
    }
    ptr--;
    if (ptr < 0){
          ptr = N - 1;
      }
}

void double_circ_FIR()
{
    output = 0;
    large_buffer[ptr] = mono_read_16Bit();
    large_buffer[ptr2] = mono_read_16Bit();
    for (i=0; i<(N-1)/2;i++){
        output += b[i]*(large_buffer[ptr+i]+large_buffer[ptr2-i-1]);
    }
    output += b[124]*large_buffer[ptr+124];
    ptr--;
    if (ptr < 0){
        ptr = N-1;
    }
    ptr2 = ptr + N;
}
